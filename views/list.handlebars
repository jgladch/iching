<div class="heading-list">
  <div class="random" data-id="1">
    <span class="glyphicon glyphicon-refresh random" data-id="1" aria-hidden="true"></span>
  </div>
  <div class="swiper-flex">
    <div class="hex-swiper-1">
      <div class="swiper-wrapper">
        {{#each hexagrams}}
          <div class="swiper-slide">
            <div id="hex-icon">
              {{#eachReverse sequence}}
                <div class="hex-icon-line {{#if this}}yang{{else}}yin{{/if}}">
                  <div class="hex-icon-line-left">&nbsp;</div>
                  <div class="hex-icon-line-right">&nbsp;</div>
                </div>
              {{/eachReverse}}
            </div>
          </div>
        {{/each}}
      </div>
    </div>
  </div>
</div>
<div class="hex-1">
  <div class="title-row">
    <div class="order-name">
      <span class="order"></span><span class="name"></span>
    </div>
    <div class="other-info">
      <div class="group">
        <span class="name-other"></span>
        <span class="break"> - </span>
        <span class="image-other"></span>
      </div>
    </div>
  </div>
  <div class="hex-icon-compare">
    <div class="line yang" data-id="1">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
    <div class="line yang" data-id="1">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
    <div class="line yang" data-id="1">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
    <div class="line yang" data-id="1">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
    <div class="line yang" data-id="1">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
    <div class="line yang" data-id="1">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
  </div>
  <div class="info-side">
    <div class="info-swiper-1">
      <div class="swiper-wrapper">
        <div class="swiper-slide">
          <div class="info-slide-wrapper">
            <text class="judgement"></text>
            <text class="judgement-comm"></text>
          </div>
        </div>
        <div class="swiper-slide">
          <div class="info-slide-wrapper">
            <text class="image"></text>
            <text class="image-comm"></text>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="heading-list">
  <div class="random" data-id="2">
    <span class="glyphicon glyphicon-refresh random" data-id="2" aria-hidden="true"></span>
  </div>
  <div class="swiper-flex">
    <div class="hex-swiper-2">
      <div class="swiper-wrapper">
        {{#each hexagrams}}
          <div class="swiper-slide">
            <div id="hex-icon">
              {{#eachReverse sequence}}
                <div class="hex-icon-line {{#if this}}yang{{else}}yin{{/if}}">
                  <div class="hex-icon-line-left">&nbsp;</div>
                  <div class="hex-icon-line-right">&nbsp;</div>
                </div>
              {{/eachReverse}}
            </div>
          </div>
        {{/each}}
      </div>
    </div>
  </div>
</div>
<div class="hex-2">
  <div class="title-row">
    <div class="order-name">
      <span class="order"></span><span class="name"></span>
    </div>
    <div class="other-info">
      <div class="group">
        <span class="name-other"></span>
        <span class="break"> - </span>
        <span class="image-other"></span>
      </div>
    </div>
  </div>
  <div class="hex-icon-compare">
    <div class="line yang" data-id="2">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
    <div class="line yang" data-id="2">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
    <div class="line yang" data-id="2">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
    <div class="line yang" data-id="2">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
    <div class="line yang" data-id="2">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
    <div class="line yang" data-id="2">
      <div class="left">&nbsp;</div>
      <div class="right">&nbsp;</div>
    </div>
  </div>
  <div class="info-side">
    <div class="info-swiper-2">
      <div class="swiper-wrapper">
        <div class="swiper-slide">
          <div class="info-slide-wrapper">
            <text class="judgement"></text>
            <text class="judgement-comm"></text>
          </div>
        </div>
        <div class="swiper-slide">
          <div class="info-slide-wrapper">
            <text class="image"></text>
            <text class="image-comm"></text>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="differences">
</div>

<script>
  $(document).ready(function () {
    $('body').css({ // Hack workaround, need to make a separate css file for this view
      display: 'flex'
    });

    var hexagrams = window.hexagrams = {{{json hexagrams}}};
    var swiper1Init = false;
    var swiper2Init = false;

    var currentHexagrams = {
      1: {},
      2: {}
    };

    var setCurrentHexagram = function (num, index, updateTitle, updateHex, updateJudge, updateDiff) {
      var hex = currentHexagrams[num] = hexagrams[index];      
      changeSequence(num, updateTitle, updateHex, updateJudge, updateDiff);

      return hex;
    };

    var getSequence = function (num) {
      var sequence = $('.hex-' + num + ' .hex-icon-compare').children().reverse().map(function (index, element) {
        var el = $(element);
        return el.hasClass('yang') ? 1 : 0;
      }).get();

      return sequence;
    };

    var matchSequence = function (sequence) {
      var index;

      var hex = _.find(hexagrams, function (hex, idx) {
        var flag = _.isEqual(hex.sequence, sequence);

        if (flag) {
          index = idx;
        }

        return _.isEqual(hex.sequence, sequence);
      });

      return index;
    };

    var compareHexagrams = function () {
      var sequence1 = currentHexagrams['1'].sequence;
      var sequence2 = currentHexagrams['2'].sequence;

      if (sequence1 && sequence2) {
        var result = [];

        _.each(sequence1, function (val, index) {
          if (val !== sequence2[index]) {
            result.push(index);
          }
        });

        return result;
      } else {
        return [];
      }
    };

    var showLineDifferences = function (diff) {
      $('.differences').children().remove();

      if (diff.length) {
        var result = {
          '1': [],
          '2': []
        };

        _.each(diff, function (val, index) {
          result['1'].push(currentHexagrams['1'].lines[val]);
          result['2'].push(currentHexagrams['2'].lines[val]);
        });

        var titleNode1 = $('<div class="title"><text class="title"></text></div>');
        titleNode1.text('Lines from ' + currentHexagrams[1].title);
        var titleNode2 = $('<div class="title"><text class="title"></text></div>');
        titleNode2.text('Lines from ' + currentHexagrams[2].title);

        var linesDiv1 = $('<div class="line-diff"></div>');
        var linesDiv2 = $('<div class="line-diff"></div>');

        _.each(diff, function (val) {
          var line1 = $('<div class="line-diff-text"></div>');
          var lineText1 = $('<text class="text"></text>');
          var comm1 = $('<div class="line-diff-comm"><text class="comm"></text></div>');
          var commText1 = $('<text class="commentary"></text>');
          lineText1.text((val + 1) + '. ' + currentHexagrams['1'].lines[val].text);
          line1.append(lineText1);
          commText1.text(currentHexagrams['1'].lines[val].commentary);
          comm1.append(commText1);
          linesDiv1.append(line1);
          linesDiv1.append(comm1);

          var line2 = $('<div class="line-diff-text"></div>');
          var lineText2 = $('<text class="text"></text>');
          var comm2 = $('<div class="line-diff-comm"><text class="comm"></text></div>');
          var commText2 = $('<text class="commentary"></text>');
          lineText2.text((val + 1) + '. ' + currentHexagrams['2'].lines[val].text);
          line2.append(lineText2);
          commText2.text(currentHexagrams['2'].lines[val].commentary);
          comm2.append(commText2);
          linesDiv2.append(line2);
          linesDiv2.append(comm2);
        });

        $('.differences').append(titleNode1);
        $('.differences').append(linesDiv1);
        $('.differences').append(titleNode2);
        $('.differences').append(linesDiv2);
        
      } else {
        var noDiff = $('<div class="title"><text class="title"></text></div>');
        noDiff.text('Same hexagram shown');
        $('.differences').append(noDiff);
      }

      return;
    };

    var changeSequence = function (num, updateTitle, updateHex, updateJudge, updateDifference) {
      var animateTitleRow = function () {
        var animateOrder = function () {
          return $('.hex-' + num + ' span.order').velocity('transition.flipXOut', {
            duration: 300,
            complete: function () {
              return $('.hex-' + num + ' span.order').text(currentHexagrams[num].order);
            }
          }).velocity('transition.flipXIn', 300);
        };

        var animateName = function () {
          return $('.hex-' + num + ' span.name').velocity('transition.flipXOut', {
            duration: 300,
            complete: function () {
              return $('.hex-' + num + ' span.name').text(currentHexagrams[num].title);
            }
          }).velocity('transition.flipXIn', 300);
        };

        var animateNameOther = function () {
          return $('.hex-' + num + ' span.name-other').velocity('transition.flipXOut', {
            duration: 300,
            complete: function () {
              return $('.hex-' + num + ' span.name-other').text(currentHexagrams[num].name);
            }
          }).velocity('transition.flipXIn', 300);
        };

        var animateTitleImage = function () {
          var buildImage = function (sequence) {
            var trigrams = [{
              sequence: [1, 1, 1],
              name: 'the Creative',
              attr: 'strong',
              image: 'heaven',
              family: 'father'
            }, {
              sequence: [0, 0, 0],
              name: 'the Receptive',
              attr: 'yielding',
              image: 'earth',
              family: 'mother'
            }, {
              sequence: [1, 0, 0],
              name: 'the Arousing',
              attr: 'movement',
              image: 'thunder',
              family: 'first son'
            }, {
              sequence: [0, 1, 0],
              name: 'the Abysmal',
              attr: 'dangerous',
              image: 'water',
              family: 'second son'
            }, {
              sequence: [0, 0, 1],
              name: 'Keeping Still',
              attr: 'resting',
              image: 'mountain',
              family: 'third son'
            }, {
              sequence: [0, 1, 1],
              name: 'the Gentle',
              attr: 'penetrating',
              image: 'wood',
              family: 'first daughter'
            }, {
              sequence: [1, 0, 1],
              name: 'the Clinging',
              attr: 'light-giving',
              image: 'fire',
              family: 'second daughter'
            }, {
              sequence: [1, 1, 0],
              name: 'the Joyous',
              attr: 'joyful',
              image: 'lake',
              family: 'third daughter'
            }];

            var upper = _.find(trigrams, function (trigram) {
              return _.isEqual(trigram.sequence, sequence.slice(3));
            });

            var lower = _.find(trigrams, function (trigram) {
              return _.isEqual(trigram.sequence, sequence.slice(0, 3));
            });

            return  upper.image.toProperCase() + ' over ' + lower.image.toProperCase();
          };

          return $('.hex-' + num + ' span.image-other').velocity('transition.flipXOut', {
            duration: 300,
            complete: function () {
              return $('.hex-' + num + ' span.image-other').text(buildImage(currentHexagrams[num].sequence));
            }
          }).velocity('transition.flipXIn', 300);
        };

        animateOrder();
        animateName();
        animateNameOther();
        animateTitleImage();
      };

      var animateHexagram = function () {
        return $('.hex-' + num + ' .hex-icon-compare').children().reverse().each(function (index, element) {
          var el = $(element);

          if (currentHexagrams[num].sequence[index] === 0) {
            el.removeClass('yang').addClass('yin');
          } else {
            el.addClass('yang').removeClass('yin');
          }
        });
      };

      var animateInfo = function () {
        var animateImage = function () {
          $('.info-swiper-' + num + ' text.image').text(currentHexagrams[num]['the image'].text);
          $('.info-swiper-' + num + ' text.image-comm').text(currentHexagrams[num]['the image'].commentary);
          return;
        };

        var animageJudge = function () {
          $('.info-swiper-' + num + ' text.judgement').text(currentHexagrams[num]['judgement'].text);
          $('.info-swiper-' + num + ' text.judgement-comm').text(currentHexagrams[num]['judgement'].commentary);
          return;
        };

        animateImage();
        animageJudge();
        return;
      };

      var animateDifference = function () {
        return showLineDifferences(compareHexagrams());
      };

      if (updateTitle) {
        animateTitleRow();
      }

      if (updateHex) {
        animateHexagram();
      }

      if (updateJudge) {
        animateInfo();
      }

      if (updateDifference) {
        animateDifference();
      }
    };

    var coinFlip = function () {
      return Math.floor(Math.random() * 2);
    };

    var randomSequence = function (num) {
      var sequence = [];

      for (var i = 0; i < 6; i++) {
        flip = coinFlip() + coinFlip() + coinFlip();
        sequence.push(flip >= 2 ? 1 : 0);
      }

      return setCurrentHexagram(num, matchSequence(sequence), true, true, true, true, true);
    };

    var handleClick = function (swiper, event) {
      return swiper.slideTo(swiper.clickedIndex);
    };

    var getQueryParamByName = function (name, url) {
      if (!url) url = window.location.href;
      name = name.replace(/[\[\]]/g, "\\$&");
      var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
          results = regex.exec(url);
      if (!results) return null;
      if (!results[2]) return '';
      return decodeURIComponent(results[2].replace(/\+/g, " "));
    };

    var hex1 = Number(getQueryParamByName('1'));
    var hex2 = Number( getQueryParamByName('2'));

    if (hex1) {
      setCurrentHexagram(1, hex1 - 1, true, true, true, false);
    } else {
      setCurrentHexagram(1, 0, true, true, true, false);
    }

    if (hex2) {
      setCurrentHexagram(2, hex2 - 1, true, true, true, true);
    } else {
      setCurrentHexagram(2, 0, true, true, true, true);
    }


    var hexSwiper1 = new Swiper ('.hex-swiper-1', {
      direction: 'horizontal',
      loop: true,
      loopedSlides: 64,
      slidesPerView: 7, // This should be done programattically to handle different screen widths
      centeredSlides: true,
      onSlideChangeEnd: function (swiper) {
        if (swiper1Init) {
          var index = swiper.activeIndex >= 64 ? swiper.activeIndex % 64 : swiper.activeIndex;
          return setCurrentHexagram(1, index, true, true, true, true);
        } else {
          swiper1Init = true;
        }
      },
      onClick: handleClick
    });

    var hexSwiper2 = new Swiper ('.hex-swiper-2', {
      direction: 'horizontal',
      loop: true,
      loopedSlides: 64,
      slidesPerView: 7, // This should be done programattically to handle different screen widths
      centeredSlides: true,
      onSlideChangeEnd: function (swiper) {
        if (swiper2Init) {
          var index = swiper.activeIndex >= 64 ? swiper.activeIndex % 64 : swiper.activeIndex;
          return setCurrentHexagram(2, index, true, true, true, true);
        } else {
          swiper2Init = true;
        }
      },
      onClick: handleClick
    });

    var infoSwiper1 = new Swiper ('.info-swiper-1', {
      direction: 'horizontal',
      loop: false,
      spaceBetween: 15
    });

    var infoSwiper2 = new Swiper ('.info-swiper-2', {
      direction: 'horizontal',
      loop: false,
      spaceBetween: 15
    });

    var scrollSwiperTo = function (num, index) {
      var swiper = num === 1 ? hexSwiper1 : hexSwiper2;
      swiper.slideTo(index, 400, false);
    };

    $('div.random').click(function () {
      var el = $(this);
      var num = el.data('id');

      return randomSequence(num);
    });

    $('.line').click(function () {
      var el = $(this);
      var num = el.data('id');

      if (el.hasClass('yang')) {
        el.removeClass('yang').addClass('yin');
      } else {
        el.removeClass('yin').addClass('yang');
      }

      var index = matchSequence(getSequence(num));

      setCurrentHexagram(num, index, true, false, true, true);
      scrollSwiperTo(num, index);
    });
  });
</script>