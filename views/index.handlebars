<div class="container-fluid">
  <div class="row">
    <div class="col-sm-4 col-sm-offset-4" id="main-container">
      <div class="heading">
        <div class="heading-container">
          <text class="title">Initiating</text>
          <text class="order">1</text>
        </div>
      </div>
      <div class="hexagram">
        <div class="line yang">
          <div class="center">&nbsp;</div>
        </div>
        <div class="line yang">
          <div class="center">&nbsp;</div>
        </div>
        <div class="line yang">
          <div class="center">&nbsp;</div>
        </div>
        <div class="line yang">
          <div class="center">&nbsp;</div>
        </div>
        <div class="line yang">
          <div class="center">&nbsp;</div>
        </div>
        <div class="line yang">
          <div class="center">&nbsp;</div>
        </div>
      </div>
    </div>
  </div>
  <div id="arrows">
    <span id="left-arrow" class="glyphicon glyphicon-chevron-left glyph-arrows" aria-hidden="true"></span>
    <span id="shuffle" class="glyphicon glyphicon-repeat glyph-arrows" aria-hidden="true"></span>
    <span id="right-arrow" class="glyphicon glyphicon-chevron-right glyph-arrows" aria-hidden="true"></span>
  </div>
</div>
<script src="/js/hexagrams.js"></script>
<script>
  $(document).ready(function () {
    jQuery.fn.reverse = [].reverse; // Smallest jquery plugin on earth
    var currentHexagram;

    var changeOrderHeading = function (order) {
      return $('.heading .order').velocity('transition.flipXOut', 200, function () {
        $('.heading .order').text(order);
      }).velocity('transition.flipXIn', 300);
    };

    var changeTitleHeading = function (title) {
      return $('.heading .title').velocity({
        translateX: 100,
        opacity: 0
      }, 200, function () {
        $('.heading .title').text(title);
      }).velocity('transition.slideRightIn', 300);
    };

    var changeSequence = function (sequence) {
      return $('.hexagram').children().reverse().each(function (index, element) {
        var el = $(element);
        return changeLine(el, true, sequence[index]);
      });
    };

    var matchHexagram = function (sequence) {
      return _.find(hexagrams, function (hexagram) {
        return _.isEqual(hexagram.sequence, sequence);
      });
    };

    var getCurrentSequence = function () {
      var sequence = $('.hexagram').children('.line').map(function () {
        return !!$(this).hasClass('yang') ? 1 : 0;
      }).get().reverse();

      return sequence;
    };

    var changeCurrentHexagramInfo = function () {
      currentHexagram = matchHexagram(getCurrentSequence());

      changeOrderHeading(currentHexagram.order);
      changeTitleHeading(currentHexagram.title);

      return;
    };

    var shiftHexagrams = function (n) {
      var index;

      if (currentHexagram.order + n < 0) { // Handle edge cases of hexagram shifting
        index = 64 + (currentHexagram.order + n);
      } else if (currentHexagram.order + n > 64) {
        index = currentHexagram.order + n - 64;
      } else {
        index = currentHexagram.order + n;
      }

      var nextHex = _.find(hexagrams, function (hexagram) {
        return hexagram.order === index;
      });

      changeSequence(nextHex.sequence);
      changeCurrentHexagramInfo();

      return;
    };

    var coinFlip = function () {
      return Math.floor(Math.random() * 2);
    };

    var flip = true;
    var changeLine = function (el, nextStateFlag, nextState) {
      var isYang = el.hasClass('yang');
      var direction;

      if (!nextStateFlag) { // If we aren't passing in a new state for the line, just flip it
        if (isYang) {
          el.removeClass('yang');
          el.addClass('yin');
          el.children().velocity({
            translateX: 0,
            width: 0
          }, 10).velocity({
            backgroundColor: '#000000',
            width: '25%'
          }, 'spring');
        } else {
          el.removeClass('yin');
          el.addClass('yang');
          
          el.children().velocity({
            translateX: !!flip ? '-500%' : '500%',
          }, 'ease-in-out');

          flip = !flip;
        }
      } else { // If we are passing in a new state, only flip it if necessary
        if (isYang && nextState === 0) {
          el.removeClass('yang');
          el.addClass('yin');
          el.children().velocity({
            translateX: 0,
            width: 0
          }, 10).velocity({
            backgroundColor: '#000000',
            width: '25%'
          }, 'spring');
        } else if (!isYang && nextState === 1) {
          el.removeClass('yin');
          el.addClass('yang');
          
          el.children().velocity({
            translateX: !!flip ? '-500%' : '500%',
          }, 'ease-in-out');

          flip = !flip;
        }
      }

      currentHexagram = matchHexagram(getCurrentSequence());

      return;
    };

    currentHexagram = matchHexagram(getCurrentSequence());

    $('.line').click(function () {
      changeLine($(this));
      return changeCurrentHexagramInfo();
    });

    $('#left-arrow').click(function () {
      return shiftHexagrams(-1);
    });

    $('#right-arrow').click(function () {
      return shiftHexagrams(1);
    });

    $('#shuffle').click(function () {
      var newSequence = [];

      for (var i = 0; i < 6; i++) {
        result = coinFlip() + coinFlip() + coinFlip();
        newSequence.push(result >= 2 ? 1 : 0);
      }

      currentHexagram = matchHexagram(newSequence);
      changeSequence(newSequence);
      changeCurrentHexagramInfo();

      return;
    });
  });
</script>