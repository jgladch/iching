<div class="container-fluid">
  <div class="row">
    <div class="col-sm-4 col-sm-offset-4" id="main-container">
      <div class="heading">
        <text class="title">Initiating</text>
        <text class="order">1</text>
      </div>
      <div class="hexagram">
        <div class="line yang">
          <div class="left">&nbsp;</div>
          <div class="right">&nbsp;</div>
        </div>
        <div class="line yang">
          <div class="left">&nbsp;</div>
          <div class="right">&nbsp;</div>
        </div>
        <div class="line yang">
          <div class="left">&nbsp;</div>
          <div class="right">&nbsp;</div>
        </div>
        <div class="line yang">
          <div class="left">&nbsp;</div>
          <div class="right">&nbsp;</div>
        </div>
        <div class="line yang">
          <div class="left">&nbsp;</div>
          <div class="right">&nbsp;</div>
        </div>
        <div class="line yang">
          <div class="left">&nbsp;</div>
          <div class="right">&nbsp;</div>
        </div>
      </div>
    </div>
  </div>
  <div id="arrows">
    <span id="left-arrow" class="glyphicon glyphicon-chevron-left glyph-arrows" aria-hidden="true"></span>
    <span id="right-arrow" class="glyphicon glyphicon-chevron-right glyph-arrows" aria-hidden="true"></span>
    <span id="flip" class="glyphicon glyphicon-menu-hamburger pull-right glyph-arrows" aria-hidden="true"></span>
    <span id="shuffle" class="glyphicon glyphicon-repeat glyph-arrows pull-right" aria-hidden="true"></span>
  </div>
</div>
<script src="/js/hexagrams.js"></script>
<script>
  $(document).ready(function () {
    jQuery.fn.reverse = [].reverse; // Smallest jquery plugin on earth
    var currentHexagram;

    var changeOrderHeading = function (order, delay) {
      var outOptions = {
        duration: 200,
        complete: function () {
          return $('.heading .order').text(order);
        }
      };

      if (!!delay) {
        outOptions.delay = delay;
      }

      return $('.heading .order').velocity('transition.flipXOut', outOptions).velocity('transition.flipXIn', 300);
    };

    var changeTitleHeading = function (title, delay) {
      var outOptions = {
        duration: 200,
        complete: function () {
          return $('.heading .title').text(title);
        }
      };

      if (!!delay) {
        outOptions.delay = delay;
      }

      return $('.heading .title').velocity({
        translateX: 100,
        opacity: 0
      }, outOptions).velocity('transition.slideRightIn', 300);
    };

    var changeSequence = function (sequence, cb) {
      return $('.hexagram').children().reverse().each(function (index, element) {
        var el = $(element);
        return index < 5 ? changeLine(el, true, sequence[index]) : changeLine(el, true, sequence[index], cb);
      });
    };

    var flipSequence = function (cb) {
      var subroutine = function (index) {
        if (index === 5) {
          return toggleIndex(index, cb, 500);
        } else {
          return toggleIndex(index, function () {
            return subroutine(index + 1);
          }, index !== 0 ? 500 : 0);
        }
      };

      return subroutine(0);
    };

    var toggleIndex = function (index, cb, delay) {
      var lines = $('.hexagram').children().reverse();

      changeLine($(lines[index]), null, null, cb, delay, true, 500);
    };

    var matchHexagram = function (sequence) {
      return _.find(hexagrams, function (hexagram) {
        return _.isEqual(hexagram.sequence, sequence);
      });
    };

    var getCurrentSequence = function () {
      var sequence = $('.hexagram').children('.line').map(function () {
        return !!$(this).hasClass('yang') ? 1 : 0;
      }).get().reverse();

      return sequence;
    };

    var changeCurrentHexagramInfo = function (delay) {
      changeOrderHeading(currentHexagram.order, delay);
      changeTitleHeading(currentHexagram.title, delay);

      return;
    };

    var shiftHexagrams = function (n) {
      var index;

      if (currentHexagram.order + n < 0) { // Handle edge cases of hexagram shifting
        index = 64 + (currentHexagram.order + n);
      } else if (currentHexagram.order + n > 64) {
        index = currentHexagram.order + n - 64;
      } else {
        index = currentHexagram.order + n;
      }

      var nextHex = _.find(hexagrams, function (hexagram) {
        return hexagram.order === index;
      });

      changeSequence(nextHex.sequence);
      changeCurrentHexagramInfo();

      return;
    };

    var coinFlip = function () {
      return Math.floor(Math.random() * 2);
    };

    var flip = true;

    var changeLine = function (el, nextStateFlag, nextState, cb, delay, changeInfo, duration) {
      var isYang = el.hasClass('yang');
      var direction;
      
      var yangOptions = {
        easing: 'spring'
      };

      var yinOptions = {
        easing: 'ease-in-out'
      };

      if (!!cb) {
        yangOptions.complete = cb;
        yinOptions.complete = cb;
      }

      if (!!delay) {
        yangOptions.delay = delay;
        yinOptions.delay = delay;
      }

      if (!!duration) {
        yangOptions.duration = duration;
        yinOptions.duration = duration;
      }

      if (!nextStateFlag) { // If we aren't passing in a new state for the line, just flip it
        if (isYang) {
          el.removeClass('yang').addClass('yin');
          el.children().velocity({
            width: '30%'
          }, yangOptions);
        } else {
          el.removeClass('yin').addClass('yang');
          el.children().velocity({
            width: '45%'
          }, yinOptions);

          flip = !flip;
        }
      } else { // If we are passing in a new state, only flip it if necessary
        if (isYang && nextState === 0) {
          el.removeClass('yang').addClass('yin');
          el.children().velocity({
            width: '30%'
          }, yangOptions);
        } else if (!isYang && nextState === 1) {
          el.removeClass('yin').addClass('yang');
          
          el.children().velocity({
            width: '45%'
          }, yinOptions);

          flip = !flip;
        }
      }

      currentHexagram = matchHexagram(getCurrentSequence());

      if (!!changeInfo) {
        changeCurrentHexagramInfo(delay);
      }

      return;
    };

    currentHexagram = matchHexagram(getCurrentSequence());

    $('.line').click(function () {
      return changeLine($(this), null, null, null, null, true);
    });

    $('#left-arrow').click(function () {
      return shiftHexagrams(-1);
    });

    $('#right-arrow').click(function () {
      return shiftHexagrams(1);
    });

    $('#shuffle').click(function () {
      var newSequence = [];

      for (var i = 0; i < 6; i++) {
        result = coinFlip() + coinFlip() + coinFlip();
        newSequence.push(result >= 2 ? 1 : 0);
      }

      currentHexagram = matchHexagram(newSequence);
      changeSequence(newSequence);
      changeCurrentHexagramInfo();

      return;
    });

    $('#flip').click(function () {
      console.log('flipping');
      flipSequence();
    });
  });
</script>